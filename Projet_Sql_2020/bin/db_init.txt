DROP SCHEMA IF EXISTS projet CASCADE;
CREATE SCHEMA projet; 

CREATE TABLE projet.formations(
	form_id SERIAL PRIMARY KEY,
	nom VARCHAR(100) CHECK (nom<>'') NOT NULL,
	ecole VARCHAR(100) CHECK (ecole <>'') NOT NULL
);

--Blocs
CREATE TABLE projet.blocs(
	bloc_id SERIAL PRIMARY KEY,
	code VARCHAR(50) UNIQUE NOT NULL CHECK(code <>''),
	formation INT NOT NULL,
	nbr_exam_non_complet INT NOT NULL DEFAULT 0,
	FOREIGN KEY(formation) REFERENCES projet.formations(form_id)
);

--Examens
CREATE TABLE projet.examens(
	examen_id SERIAL PRIMARY KEY,
 	code VARCHAR(6) UNIQUE NOT NULL CHECK(code SIMILAR TO 'IPL[0-9]{3}'),
 	nom VARCHAR(50) NOT NULL,
 	bloc INT NOT NULL,
 	sur_machine BOOLEAN NOT NULL,
 	heure_debut TIMESTAMP NULL,
 	duree INTERVAL NOT NULL,
 	completement_reserve BOOLEAN NOT NULL DEFAULT FALSE,
 	FOREIGN KEY(bloc) REFERENCES projet.blocs(bloc_id)
);

CREATE TABLE projet.etudiants(
	etudiant_id SERIAL PRIMARY KEY,
	nom VARCHAR(100) UNIQUE CHECK (nom<>'') NOT NULL,
	email VARCHAR(100) CHECK (email SIMILAR TO '%_@_%._%') NOT NULL UNIQUE,
	mdp VARCHAR(100) CHECK (mdp<>'') NOT NULL,
	bloc INTEGER REFERENCES projet.blocs(bloc_id) NOT NULL
);

CREATE TABLE projet.inscriptions(
	examen_id INTEGER REFERENCES projet.examens(examen_id) NOT NULL,
	etudiant_id INTEGER REFERENCES projet.etudiants(etudiant_id) NOT NULL,
	PRIMARY KEY (examen_id, etudiant_id)
);

CREATE TABLE projet.locaux(
	local_id SERIAL PRIMARY KEY,
	nom VARCHAR(100) CHECK (nom<>'') NOT NULL UNIQUE,
	nb_places INTEGER NOT NULL,
	machines BOOLEAN
);

CREATE TABLE projet.reservations(
	local_id INTEGER REFERENCES projet.locaux(local_id) NOT NULL,
	examen_id INTEGER REFERENCES projet.examens(examen_id) NOT NULL,
	PRIMARY KEY (local_id, examen_id)
);




--INSERT-------------------------------------------------------------

CREATE OR REPLACE FUNCTION projet.insertLocal(_nom VARCHAR(100), _nb_places INTEGER, _machines BOOLEAN) RETURNS INTEGER AS $$
DECLARE
	l_id INTEGER;
BEGIN
	INSERT INTO projet.locaux
	VALUES (DEFAULT, _nom, _nb_places, _machines) RETURNING local_id into l_id;
	RETURN l_id;
END;
$$ LANGUAGE plpgsql;

--SELECT projet.insertLocal('B021', 100, false);



CREATE OR REPLACE FUNCTION projet.insertExamen(_code VARCHAR(6), _nom VARCHAR(100), _bloc VARCHAR, _sur_machine BOOLEAN,
						_duree INTEGER) RETURNS INTEGER AS $$
DECLARE 
	e_id INTEGER;
	b_id INTEGER;
	interval INTERVAL;
BEGIN

	SELECT bloc_id 
	FROM projet.blocs b
	WHERE b.code LIKE _bloc into b_id;
	
	SELECT make_interval(mins := _duree)into interval;

	INSERT INTO projet.examens
	VALUES (DEFAULT, _code, _nom, b_id, _sur_machine, NULL, interval, DEFAULT ) RETURNING examen_id into e_id;
	RETURN e_id;
END;
$$ LANGUAGE plpgsql;

--SELECT projet.insertExamen('IPL226', 'examen de sql', 'BIN3', true, 3);



CREATE OR REPLACE FUNCTION projet.insertEtudiants(_email VARCHAR, _nom VARCHAR, _mdp VARCHAR, _bloc VARCHAR) RETURNS INTEGER AS $$
DECLARE
	e_id INTEGER;
	b_id INTEGER;
BEGIN
	SELECT bloc_id 
	FROM projet.blocs b
	WHERE b.code LIKE _bloc into b_id;
	
	INSERT INTO projet.etudiants
	VALUES (default, _nom, _email, _mdp, b_id) RETURNING etudiant_id into e_id;
	RETURN e_id;
END;
$$ LANGUAGE plpgsql;

-- SELECT projet.insertEtudiants('a@gmail.com', 'etudiant1', 'mdp', 'BIN3');


--EN DOUBLE----------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION projet.insertInscription(_etudiant_id INTEGER, _code_examen VARCHAR) RETURNS INTEGER AS $$
DECLARE
	i_id INTEGER;
	e_id INTEGER;
BEGIN
	SELECT e.examen_id
	FROM projet.examens e
	WHERE e.code LIKE _code_examen into e_id;
	
	INSERT INTO projet.inscriptions
	VALUES (e_id, _etudiant_id) RETURNING examen_id into i_id;
	RETURN i_id;

END;
$$ LANGUAGE plpgsql;

-- SELECT projet.insertInscription(1,'IPL148');



CREATE OR REPLACE FUNCTION projet.inscriptionUnExamen( _etudiant_id INTEGER, _code_examen VARCHAR) RETURNS VOID AS $$
DECLARE
	i_id INTEGER;
	ex_id INTEGER;
BEGIN
	SELECT e.examen_id
	FROM projet.examens e
	WHERE e.code SIMILAR TO _code_examen into ex_id;

	if (SELECT e.heure_debut
	   	FROM projet.examens e
	   	WHERE e.examen_id = ex_id) IS NOT NULL	
	then 	
		RAISE 'errer : heure déjà encodée';
	else	
		INSERT INTO projet.inscriptions VALUES (ex_id, _etudiant_id);
	end if;
END;
$$ LANGUAGE plpgsql;

-- SELECT projet.inscriptionUnExamen(3,'IPL148');
		

CREATE OR REPLACE FUNCTION projet.inscriptionExamensBloc(_id_etudiant INTEGER) RETURNS VOID AS $$ 
DECLARE 
    b_id INTEGER;
    exam RECORD; 
BEGIN 
    SELECT b.bloc_id 
    FROM projet.blocs b, projet.etudiants e
    WHERE b.bloc_id = e.bloc AND e.bloc = _id_etudiant into b_id;

    FOR exam IN SELECT e.examen_id FROM projet.examens e WHERE e.bloc = b_id  LOOP 
        INSERT INTO projet.inscriptions VALUES (exam.examen_id,_id_etudiant); 
    END LOOP; 
END; 
$$ LANGUAGE plpgsql; 

-- SELECT projet.inscriptionExamensBloc(4);


CREATE OR REPLACE FUNCTION projet.reserverLocal(_code_exam VARCHAR, _code_local varchar) RETURNS VOID AS $$
DECLARE 
	e_id INTEGER;
	l_id INTEGER;
BEGIN
	SELECT e.examen_id FROM projet.examens e WHERE e.code = _code_exam into e_id;
	SELECT l.local_id FROM projet.locaux l WHERE l.nom = _code_local into l_id;
	
	IF e_id IS NULL
	THEN 
		RAISE 'erreur : pas d examens avec ce code';
	END IF;
	
	IF l_id IS NULL
	THEN 
		RAISE 'erreur : pas de local avec ce code';
	END IF;
	
	INSERT INTO projet.reservations VALUES (l_id, e_id);
END;
$$ LANGUAGE plpgsql;
--SELECT projet.reserverLocal('IPL146', 'A023');


-- fonction encoder heure examen
CREATE OR REPLACE FUNCTION projet.encoderheure(_code VARCHAR,_heure TIMESTAP) returns VOID AS $$
DECLARE
BEGIN 
   UPDATE projet.examens 
   SET heure_debut=(_heure) 
   WHERE examens.code =(_code);
END; 
$$ LANGUAGE plpgsql;

--DISPLAY-------------------------------------------------------------


CREATE OR REPLACE FUNCTION projet.displayHoraire( _id_etudiant INTEGER) RETURNS SETOF RECORD AS $$
DECLARE
	sep VARCHAR;
	texte VARCHAR;
	sortie RECORD;
	examen RECORD;
	locaux RECORD;
	heure_fin INTERVAL;
BEGIN
	FOR examen IN 	SELECT DISTINCT e.* FROM projet.examens e, projet.inscriptions i
					WHERE _id_etudiant = i.etudiant_id AND i.examen_id = e.examen_id
	LOOP
		texte:=''; sep:='';
		FOR locaux IN 	
			SELECT l.* 
			FROM projet.locaux l, projet.examens e LEFT OUTER JOIN projet.reservations r on e.examen_id = r.examen_id
			WHERE r.local_id = l.local_id  AND e.examen_id = examen.examen_id
			LOOP 	texte:=texte || sep || locaux.nom ;
            		sep:=' + ';
			END LOOP;
			SELECT examen.code, examen.nom, b.code, examen.heure_debut, texte INTO sortie FROM projet.blocs b WHERE examen.bloc = b.bloc_id;
	RETURN NEXT sortie;
	END LOOP;
RETURN;
END;
$$ LANGUAGE 'plpgsql';

SELECT projet.displayHoraire(1);


--VIEW----------------------------------------------------------

--Visualier tous les examens (application utilisateur, connecté :1)
CREATE OR REPLACE VIEW projet.displayTousExamens AS
	SELECT e.code AS "Code examen" , e.nom AS "Nom examen", e.duree AS "Durée"
	FROM projet.examens e;


--Visualiser tous les examens d'un bloc en particulier (app centrale 5)
CREATE OR REPLACE VIEW projet.displayExamens AS
	SELECT b.code AS "code_bloc", e.heure_debut AS "heure_debut", e.code AS "code_examen", e.nom AS "nom_examen", COUNT(r.local_id) AS "nbr_locaux"
	from projet.examens e LEFT OUTER JOIN projet.reservations r on r.examen_id = e.examen_id, projet.blocs b
	WHERE b.bloc_id = e.bloc
	GROUP BY e.examen_id, b.code
	ORDER BY e.heure_debut;
--SELECT heure_debut, code_examen, nbr_locaux from projet.displayExamens WHERE code_bloc LIKE 'BIN3'


--Visualiser tous les examens d'un bloc (app centrale 6)
CREATE OR REPLACE VIEW projet.displayExamensParLocal AS
	SELECT e.heure_debut AS "heure_debut", e.code AS "code_examen", e.nom AS "nom_examen", l.nom AS "nom_local"
	from projet.examens e, projet.reservations r, projet.locaux l
	WHERE r.examen_id = e.examen_id and l.local_id = r.local_id
	GROUP BY e.examen_id, l.local_id
	ORDER BY e.heure_debut;
--SELECT heure_debut, code_examen, nom_examen from projet.displayExamensParLocal WHERE nom_local LIKE 'A023'


--Visualiser tous les examens pas complets (app cenrale 7)
CREATE OR REPLACE VIEW projet.displayExamensNonComplets AS 
	SELECT e.*
	FROM projet.examens e
	WHERE e.completement_reserve = 'false'
	ORDER BY e.code;
	
--SELECT * from projet.displayExamensNonComplets


--TRIGGER----------------------------------------------------------------

--NE FONCTIONNE PAS

CREATE OR REPLACE FUNCTION ExamenNonComplet() RETURNS TRIGGER AS $$
DECLARE
	record RECORD;
	total INTEGER;
BEGIN
	SELECT b.nbr_exam_non_complet, b.bloc_id
		FROM projet.blocs b, projet.examens e
		WHERE b.bloc_id = NEW.bloc AND e.bloc = b.bloc_id INTO record;
		
	Update projet.blocs 
	set nbr_exam_non_complet = record.nbr_exam_non_complet+1
	WHERE bloc_id = record.bloc_id;
	
	RETURN NEW;

END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_ExamenNonComplet AFTER INSERT ON projet.examens 

FOR EACH ROW EXECUTE PROCEDURE ExamenNonComplet(); 






-- TRIGGER POUR ENCODAGE HEURE EXAMEN

CREATE OR REPLACE FUNCTION verif_heure_exam() RETURNS TRIGGER AS $$ 

DECLARE
BEGIN

IF NOT EXISTS ( SELECT * FROM projet.inscriptions i WHERE i.examen_id = NEW.examen_id)

THEN
	RAISE 'erreur : aucune inscription pour cet examen.';

END IF;

RETURN NEW; 

END; 

$$ LANGUAGE plpgsql; 

CREATE TRIGGER trigger_verif_heure_exam AFTER UPDATE ON projet.examens 

FOR EACH ROW EXECUTE PROCEDURE verif_heure_exam(); 




-- TRIGGER POUR VERIFICATION RESA LOCAL

CREATE OR REPLACE FUNCTION verif_local() RETURNS TRIGGER AS $$ 

DECLARE 
verif_exam RECORD;
exam RECORD;
tulpe_local RECORD;

BEGIN
 SELECT l.local_id,l.nom,l.nb_places,l.machines FROM projet.locaux l WHERE l.local_id = NEW.local_id INTO tulpe_local;
 SELECT * FROM projet.examens e WHERE e.examen_id = NEW.examen_id INTO exam;

IF

tulpe_local.machines = FALSE AND exam.sur_machine = TRUE

THEN 

	RAISE 'erreur :examen sur machine, besoin d un local équipé !';


END IF;

IF

exam.completement_reserve = TRUE

THEN

	RAISE 'erreur : examen déjà complètement réservé ';

END IF;

IF 

exam.heure_debut IS NULL

THEN 

	RAISE 'erreur : Heure de début d exam pas encore fixée!';
END IF;

IF EXISTS ( SELECT * FROM projet.reservations r WHERE r.local_id = NEW.local_id)

THEN

FOR verif_exam IN SELECT * FROM projet.reservations r WHERE r.local_id = NEW.local_id LOOP

IF ( SELECT e.heure_debut FROM projet.examens e WHERE e.examen_id = verif_exam.examen_id ) = exam.heure_debut 

THEN
	RAISE 'erreur: examen déjà en cours dans ce local à ce moment là.';

END IF;
	
END  LOOP;	


END IF;

RETURN NEW; 

END; 

$$ LANGUAGE plpgsql; 


CREATE TRIGGER trigger_verif_local AFTER INSERT ON projet.reservations 

FOR EACH ROW EXECUTE PROCEDURE verif_local(); 




--INSERT--------------------------------------------------------------

insert into projet.formations values (default, 'info', 'ipl');
insert into projet.blocs values (default, 'BIN3', 1, default);
--insert into projet.examens values ( default, 'IPL123', 'examen de sql', 1, true, '2020-12-12 10:00:00', INTERVAL '3' HOUR, default);

insert into projet.locaux values (default, 'A023', 30, true);

--insert into projet.reservations values (1,1);

--insert into projet.etudiants values (default, 'jean', 'jean@gmail.com', 'mdp', 1);

--insert into projet.inscriptions values (1, 1);
 insert into projet.examens values (DEFAULT,'IPL146', 'examen de java',1,true,'2020-12-12 10:00:00',INTERVAL '3' HOUR, default);
 insert into projet.examens values (DEFAULT,'IPL147', 'examen de java2',1,true,'2020-12-12 10:00:00',INTERVAL '3' HOUR, default);
 SELECT projet.insertExam('IPL148', 'examen de sql', 'BIN3', true,INTERVAL '3' HOUR);
 SELECT projet.insertExam('IPL149', 'examen de sql2', 'BIN3', false,INTERVAL '3' HOUR);
 SELECT projet.insertEtudiants('a@gmail.com', 'etudiant1', 'mdp', 'BIN3');
 SELECT projet.insertEtudiants('b@gmail.com', 'etudiant2', 'mdp', 'BIN3');
 SELECT projet.insertEtudiants('c@gmail.com', 'etudiant3', 'mdp', 'BIN3');
 SELECT projet.insertInscription(1,'IPL148');
 SELECT projet.inscriptionUnExamen(2,'IPL148');
 SELECT projet.inscriptionExamensBloc(3);








